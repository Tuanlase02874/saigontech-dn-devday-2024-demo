services:
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: dev-zookeeper
    #restart: always
    networks:
      - dev-network
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD", "nc", "-vz", "localhost", "2181"]
      interval: 10s
      timeout: 10s
      retries: 3

  kafka:
    image: wurstmeister/kafka
    container_name: dev-kafka
    networks:
      - dev-network
    depends_on:
      - zookeeper
    #restart: always
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ADVERTISED_PORT: 9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "topicname:2:1,testkafka:2:1"
    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics.sh --list --zookeeper zookeeper:2181" ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 20s

  python_consumer:
    build:
      context: ./kafka_example
      dockerfile: Dockerfile
    volumes:
      - ./kafka_example:/app
    depends_on:
      - kafka
    entrypoint: /bin/bash
    stdin_open: true 
    tty: true  
    networks:
    - dev-network      

  python_producer:
    build:
      context: ./kafka_example
      dockerfile: Dockerfile
    volumes:
      - ./kafka_example:/app
    depends_on:
      - kafka
    entrypoint: /bin/bash
    stdin_open: true 
    tty: true
    networks:
    - dev-network

  triton-server:
    image: nvcr.io/nvidia/tritonserver:23.05-py3
    deploy:
      resources:
        reservations:
          devices:
          - driver: nvidia
            device_ids: ['0']
            capabilities: [gpu]
    #command: bash start.sh
    shm_size: 2g
    ipc: host
    ulimits:
      memlock: -1
      stack: 67108864
    ports:
      - "8000:8000"
      - "8001:8001"
      - "8002:8002"
    volumes:
      - ./triton-server-yolo:/app
      - ${PWD}:/workspace
    working_dir: /apps
    tty: true
    stdin_open: true
    networks:
    - dev-network

  triton_client:
    build:
      context: ./triton-client-yolo
      dockerfile: Dockerfile
    volumes:
      - ./triton-client-yolo:/app
      - ${PWD}:/workspace
    depends_on:
      - kafka
    entrypoint: /bin/bash
    stdin_open: true 
    tty: true
    networks:
    - dev-network


networks:
  dev-network:
    driver: bridge
